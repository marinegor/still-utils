#!/bin/bash

HELP_STRING="\
This is a wrapper script for CrystFEL-based processing of SFX data, written by Egor Marin @marinegor.
Please contact me via marin@phystech.edu or github, if you know any issue.

It provides you with extensive information about your stream file
and merging statistics without usage of GUI.

It is written in bash and uses only standard CrystFEL utils, such as 
process_hkl, partialator, compare_hkl, etc.

------
Usage:
------
	./analyzer -i output.stream \\
		--merging process_hkl \\
		--lowres 30.0 --highres 3.0 -y 222 --pushres 2.5 \\
		-o lyzozyme 

		Provides you with output.stream indexing stats 
		and performs merging with process_hkl
		Writes output to lysozyme.{hkl,hkl1,hkl2}.


	./analyzer -i lysozyme --rate \\
		--highres 2.5 --lowres 20.0 --cell lyz_v2.cell

		Runs compare_hkl on previously generated hkl files
		with different unit cell file and resolution cutoffs


--------------------
Workflow parameters:
--------------------
	-i, --input
		Input file name (name or mask)
	-o, --output
		Output HKL file name template.
		Default: 'oanalyzer_YYYY-MM-DD-HH-SS'
	--cell, -p
		Unit cell file (used for compare_hkl only)
	--merging
		How you want your merging to be done. 
		Options:
			none:	no merging will be performed
			process_hkl: merging with process_hkl will be performed
			partialator: merging with partialator will be done
	--rate
		You may want to rate previously processed HKL-file, but not perform any
		merging on stream. If that is true, input file name --input should be
		an HKL filename, rather than a stream. All three <>.[hkl, hkl1, hkl2]
		should be present.
	--multi_rmsd
		Used by multilattice_validate.py as cutoff (in degrees).
		If two lattices on the same image might be rotated on angle less than that,
		they will be considered as a false multiple.
	--nproc, -j
		Number of processors to be used for merging. By default, output of 'nproc'.
		If --nproc=0 or less, will use all availalbe and print warning.
	--logs
		A folder to write logs in. By default, logs/analyzer.<stream_md5sum>.<date>
	--histogram
		Whether to write histogram of resolutions or not (0 or 1).
		By default 1 -- does not build a histogram.
	--cleanup
		Whether you want to remove temporary files, such as concatenated stream,
		after the run is finished. Should be 0 or 1 (1 by default -- will clean up).
-------------------
Merging parameters:
-------------------
	--lowres, --highres
		Low and high resolution for output merging statistics table
	--pushres
		Merges reflections of higher than resolution_limit for each particular crystal,
		as predicted by peakfinder8 or peakfinder9.
		Quote from the process_hkl man:
		\"Merge reflections which are up to n nm^-1 higher than the apparent resolution limit of each individual crystal.
		 n can be negative to merge lower than the apparent resolution limit.\"
		However, negative is yet disabled by this script, since it hasn't been useful so far.
	--iterations
		Number of iterations for scaling (used by partialator only)
	--highres_include
		Include in final merging only those crystals that have crystfel-predicted resolution higher than that.
		Used by process_hkl only (--min-res in man), partialator does not have this feature.
	--min_cc
		Quote from process_hkl man:
		 \"Perform a second pass through the input, merging crystals only if their correlation with the initial model is at least n.\"
	-y, --symmetry
		Symmetry for merging. 
		Used by process_hkl/partialator and compare_hkl and check_hkl.
	--model
		Model for partialator. Should be either 'unity' or 'xsphere'.
	--string_params
		Parameters for either process_hkl or partialator provided as a string.
		Warning: it is your duty to make sure you provide valid parameters for
		the tool of your choice.
"

INPUT=""
OUTPUT="oanalyzer_$(date +%F-%H-%M-%S)"
CELL=""
MERGING="none"
RATE=""
NPROC=$(nproc)
LOGS=""
HISTOGRAM=1
CLEANUP=1
#---------
LOWRES=""
HIGHRES=""
SYMMETRY=""
PUSHRES=""
HIGHRES_INCLUDE=""
MIN_CC=""
ITERATIONS=""
STRING_PARAMS=""
MODEL=""
MULTI_RMSD=""

############################
# READING INPUT PARAMETERS #
############################
while [[ $# -gt 0 ]]; do
	key="$1"
	# echo "..Current argument is ${key}"
	case "$key" in 
		-h|--help)
			echo "${HELP_STRING}";
			exit 0
	shift
	;;
	#----------------------------------------
		-i|--input)
			if ! [ -f "$3" ]; then
				echo "Single-stream mode"
				INPUT="$2";
				shift
			else
				num_streams=0
				if [ -f "tmp.stream" ]; then 
					echo "Removing tmp.stream" 
					rm "tmp.stream"; fi
				while [ -f "$2" ]; do
					echo "    ...using $2 as part of input file"
					cat "$2" >> 'tmp.stream'
					let num_streams="$num_streams"+1
					shift
				done
				echo "Multi-stream mode, $num_streams streams"
				INPUT="tmp.stream";
			fi
	;; # there is no shift here for correct multi-stream input
	#----------------------------------------
		-o|--output)
			OUTPUT="$2"
	shift
	;;
	#----------------------------------------
		-p|--cell)
			CELL="$2"
	shift
	;;
	#---------------------------------------- #
		--merging)
			MERGING="$2"
			if [[ "$MERGING" != "none" ]] && [[ "$MERGING" != "partialator" ]] && [[ "$MERGING" != "process_hkl" ]]; then
				echo "MERGING parameter should be either 'none' or 'process_hkl' or 'partialator'"; exit 1
			fi
	shift
	;;
	#----------------------------------------
		--rate)
			RATE="$2"
	shift
	;;
	#----------------------------------------
		--nproc|-j)
			NPROC="$2"
	shift
	;;
	#----------------------------------------
		--logs)
			LOGS="$2"
	shift
	;;
	#----------------------------------------
		--histogram)
			HISTOGRAM="$2"
	shift
	;;
	#----------------------------------------
		--cleanup)
			CLEANUP="$2"
	shift
	;;
	#----------------------------------------
		--lowres)
			LOWRES="$2"
	shift
	;;
	#----------------------------------------
		--highres)
			HIGHRES="$2"
	shift
	;;
	#---------------------------------------- 
		--pushres)
			PUSHRES="$2"
	shift
	;;
	#----------------------------------------
		--iterations)
			ITERATIONS="$2"
	shift
	;;
	#----------------------------------------
		--highres_include)
			HIGHRES_INCLUDE="$2"
	shift
	;;
	#----------------------------------------
		--multi_rmsd)
			MULTI_RMSD="$2"
	shift
	;;
	#----------------------------------------
		--min_cc)
			MIN_CC="$2"
	shift
	;;
	#----------------------------------------
		--string_params)
			STRING_PARAMS="$2"
	shift
	;;
	#----------------------------------------
		--model)
			MODEL="$2"
	shift
	;;
	#----------------------------------------
		--symmetry)
			SYMMETRY="$2"
	shift
	;;
	#----------------------------------------
	esac
	shift # past argument or value
done


################################################
# CHECKING THAT ALL INPUT PARAMETERS ARE VALID #
################################################

# check validity of OUTPUT
if ! (touch "$OUTPUT" &> /dev/null); then
	echo "Error: could not access output ${OUTPUT}, please check access right and/or folder structure"; exit 1
else
	rm "$OUTPUT"
fi

# check validity of LOGS
if [[ "${LOGS}" == "" ]]; then
	echo "You have not provided --logs, will use default value"
	HASH=$(md5sum "${INPUT}" | head -c 6)
	if ! [[ -d "logs" ]]; then echo "Warning: will create ./logs folder"; fi
	LOGS="logs/analyzer.${HASH}.$(date +%F-%H-%M-%S)"
	mkdir -p "${LOGS}"
else
	if [[ -d "$LOGS" ]]; then echo "Error: folder <${LOGS}> exist, will not proceed"; exit 1; fi
	mkdir -p "$LOGS"
fi

# check validity of CELL
if ! [[ -f "$CELL" ]]; then
	echo "Warning: could not access cell <${CELL}> (or you did not provide it), please check access right and/or folder structure"
	echo "Warning: will proceed using cell from the stream"
	python3 extract_cell.py ${INPUT} > "${LOGS}/${OUTPUT}".cell
	echo "Warning: using cell ${LOGS}/${OUTPUT}.cell -- check if it's correct"
else
	rm "$OUTPUT" &> /dev/null
fi

# check validity of RATE
if [[ "$RATE" != "" ]] && [[ "$RATE" != "no" ]]; then
	if ! [[ -f "${RATE}.hkl" ]]; then
		echo "Erorr: could not existance, access output ${RATE}.hkl, please check existance, access right and/or folder structure"; exit 1;
	elif ! [[ -f "${RATE}.hkl1" ]]; then
		echo "Error: could not existance, access output ${RATE}.hkl1, please check existance, access right and/or folder structure"; exit 1
	elif ! [[ -f "${RATE}.hkl2" ]]; then
		echo "Error: could not existance, access output ${RATE}.hkl2, please check existance, access right and/or folder structure"; exit 1
	else
		:
	fi
fi

# check validity of NPROC
is_integer='^[0-9]+$'
if ! [[ ${NPROC} =~ $is_integer ]] ; then
	echo "Erorr: NPROC should be a valid number, now <${NPROC}>"; exit 1; fi
if [ "${NPROC}" -gt "$(nproc)" ]; then
	echo "Error: NPROC should be less or equal than maximum available $(nproc)"; exit 1; fi
if [ "${NPROC}" -lt 1 ]; then
	echo "Warning: will use all available processors, since you provided ${NPROC} < 1"; fi

# check validity of HISTOGRAM
if  [ "$HISTOGRAM" -ne 1 ] && [ "$HISTOGRAM" -ne 0 ]; then
	echo "Error: HISTOGRAM should be either 1 or 0, you provided <${HISTOGRAM}>."; exit 1; fi

# check validity of CLEANUP
if  [ "$CLEANUP" -ne 1 ] && [ "$CLEANUP" -ne 0 ]; then
	echo "Error: CLEANUP should be either 1 or 0, you provided <${CLEANUP}>."; exit 1; fi

# check validity of LOWRES and HIGHRES
is_float_positive='^[0-9]*\.[0-9]*$'
if [[ ${LOWRES} == "" ]]; then
	echo "Warning: LOWRES will be 30.0 by default"
	LOWRES=30.0; fi
if [[ ${HIGHRES} == "" ]]; then
	echo "Warning: HIGHRES will be 3.0 by default"
	HIGHRES=3.0; fi
if ! [[ ${LOWRES} =~ $is_float_positive ]]; then
	echo "Error: LOWRES should be valid float number, e.g. 3.0 (but '03.0' would be invalid)"; exit 1; fi
if ! [[ ${HIGHRES} =~ $is_float_positive ]]; then
	echo "Error: HIGHRES should be valid float number, e.g. 30.0 (but '030.0' would be invalid)"; exit 1; fi
if (( $(echo "${HIGHRES} >= ${LOWRES}" |bc -l) )); then
	echo "Error: HIGHRES >= LOWRES"; exit 1; fi

# check validity of PUSHRES
is_float_positive='^[0-9]*\.[0-9]*$'
if [[ ${PUSHRES} == "" ]]; then
	echo "Warning: will use default PUSHRES=1.0"; PUSHRES=1.0; fi
if ! [[ ${PUSHRES} =~ $is_float_positive ]]; then
	echo "Error: PUSHRES should be valid float number, e.g. 3.0 (but '03.0' would be invalid)"; exit 1; fi

# check validity of ITERATIONS
is_integer='^[0-9]+$'
if [[ ${ITERATIONS} == "" ]]; then
	echo "Warning: will use default ITERATIONS=0"; ITERATIONS=0; fi
if ! [[ ${ITERATIONS} =~ $is_integer ]]; then
	echo "Error: ITERATIONS should be valid integer number, e.g. 3 (but '03' or '3.' would be invalid)"; exit 1; 
elif [ ${ITERATIONS} -ge 3 ]; then
	echo "Warning: are you sure ITERATIONS should be more than 2? It may cause unstable merging and scaling"
fi

# check validity of HIGHRES_INCLUDE
is_float_positive='^[0-9]*\.[0-9]*$'
if [[ ${HIGHRES_INCLUDE} == "" ]]; then
	echo "Warning: will use default HIGHRES_INCLUDE=100.0 (basically, include all possible resolutions)"; 
	HIGHRES_INCLUDE=100.0; 
fi
if ! [[ ${HIGHRES_INCLUDE} =~ $is_float_positive ]]; then
	echo "Error: HIGHRES_INCLUDE should be valid float number, e.g. 3.0 (but '03.0' would be invalid)"; exit 1; fi

# check validity of MULTI_RMSD
is_float_positive='^[0-9]*\.[0-9]*$'
if [[ ${MULTI_RMSD} == "" ]]; then
	echo "Warning: will use default MULTI_RMSD=5.0 degrees"; MULTI_RMSD=5.0; fi
if ! [[ ${MULTI_RMSD} =~ $is_float_positive ]]; then
	echo "Error: MULTI_RMSD should be valid float number, e.g. 3.0 (but '03.0' would be invalid)"; exit 1; fi
if (( $(echo "${MULTI_RMSD} > 30.0" |bc -l) )); then
	echo "Warning: are you sure you want your MULTI_RMSDs be that large? It may give unreasonably high false multiples number"; fi

# check validity of MIN_CC
is_float='^\-{0,1}[0-9]*\.[0-9]*$'
if [[ ${MIN_CC} == "" ]]; then
	echo "Warning: will use default MIN_CC=-1.0"; MIN_CC=-1.0; fi
if ! [[ ${MIN_CC} =~ $is_float ]]; then
	echo "$MIN_CC"
	echo "Error: MIN_CC should be valid float number, e.g. 3.0 (but '03.0' would be invalid)"; exit 1; fi
if (( $(echo "${MIN_CC} > 1.0" |bc -l) )) || (( $(echo "${MIN_CC} < -1.0" |bc -l) )); then
	echo "Error: |MIN_CC| <= 1 is not valid for your MIN_CC=${MIN_CC}"; exit 1; fi

# check validity of MODEL
if [[ ${MERGING} == "partialator" ]]; then
	if [[ ${MODEL} == "" ]]; then
		echo "Warning: will use 'unity' model by default"; MODEL="unity"; fi

	if ! [[ ${MODEL} == "unity" ]] && [[ ${MODEL} == "xsphere" ]]; then
		echo "Error: MODEL should be either 'unity' or 'xsphere'"; exit 1; fi
fi

# check validity of SYMMETRY
if ! [[ ${MERGING} == "none" ]]; then
	echo "Error: you must provide SYMMETRY, if you do merging"; exit 1; fi


#----------------------------------------------------------------------------------------------
# PART WHERE I DO STREAM ANALYTICS
#	- per-indexer dictribution

NIMAGES=$(grep -a "Begin chunk" "$INPUT" -c)
NCRYST=$(grep -a "Begin crystal" "$INPUT" -c)
METHODS=($(grep -E -a "indexed_by" "$INPUT" | grep -a -v 'none' | sort | uniq | awk 'NF>1{print $NF}' | tr '\n' ' '))
NINDEXED=0

echo "================"
echo "Indexer details"
echo "================"
for method in "${METHODS[@]}"; do
	if [ "$method" = "none" ]; then continue; fi

	tmp="$(grep -E -c -a -w "$method" "$INPUT")"	
	let "NINDEXED=$NINDEXED+$tmp"
	ratio=$(echo " scale=3; $tmp/$NIMAGES" | bc)
	echo -e "$ratio" "\t" "$tmp" "\t" "$method"
done

pythonstring='from __future__ import print_function; print(*[i.split("-i")[1].split()[0] for i in open("'$INPUT'").readlines() if "indexamajig" in i],sep="\n")'
NIMAGES_INPUT=$(python -c "$pythonstring" | xargs wc -l 2> /dev/null | tail -1 | awk '{print $1}') 
if [[ "$NIMAGES_INPUT" -eq 0 ]]; then
	NIMAGES_INPUT="n/a (file lists not available)"; fi 

# 	- number of images for processing
#	- fraction of multiple hits
echo "================"
echo "Indexing summary"
echo "================"
echo "Images for processing:      ${NIMAGES_INPUT}"
echo "Number of processed images: ${NIMAGES}"
echo "Number of indexed images:   ${NINDEXED}"
echo "Number of crystals:  ${NCRYST}"
echo "Image indexing rate: $(echo "scale=2; ${NINDEXED}/${NIMAGES}" | bc)"
echo "Crystals percentage: $(echo "scale=2; ${NCRYST}/${NIMAGES}" | bc)"


echo "======================="
echo "Spitting out some lists"
echo "======================="

#	- number of processed images (and full list)
#	- number of indexed images (and full list)
for method in "${METHODS[@]}"; do
	if [[ $(grep -c "Event" ${INPUT}) -gt 3 ]]; then
		grep "indexed_by = ${method}" ${INPUT} -B 4 | grep "Image filename\|Event" | grep "Image\|Event" | sed 'N;s/\n/ /' | awk '{print $3, $5}' > "$LOGS"/"$OUTPUT".${method}.lst
	else
		grep "indexed_by = ${method}" ${INPUT} -B 3 | grep "Image filename" | grep "Image" | awk '{print $3, $5}' > "$LOGS"/"$OUTPUT".${method}.lst
	fi
	echo "Indexed by $method here:         ${LOGS}/${OUTPUT}.${method}.lst"
done


# TODO: working on calling external validation tools
# -multilattice_validate.py (this repo)

if [[ -f ./multilattice_validate.py ]]; then
	./multilattice_validate.py ${INPUT} --rmsd $MULTI_RMSD --out "${LOGS}/${OUTPUT}.multiples.lst"
elif command -v multilattice_validate.py 2>/dev/null;  then
	multilattice_validate.py ${INPUT} --rmsd $MULTI_RMSD --out "${LOGS}/${OUTPUT}.multiples.lst"
else
	echo "Warning: 'multilattice_validate.py' is not in current or path, won\'t be used"
fi

# PART WHERE I EXECUTE EXTERNAL SCRIPTS
#	- detector-shift -- compare shifted and non-shifted values
#	- multicrystal_validate -- access quality of multi-crystal indexing
#		- number of images with multiple crystals (and full list)
# PART WHERE I DRAW HISTOGRAMS
#	- indexed resolution histogram
#	- non-indexed resolution histogram
#	- full resolution histogram


# PART WHERE I MERGE THE DATA
if [[ "$MERGING" == "partialator" ]]; then
	# runs partialator to estimate rmeas and other foms
	MERGING_COMMAND="partialator \
-i $INPUT \
-o ${LOGS}/${OUTPUT}.hkl \
--iterations=$ITERATIONS \
-j $NPROC \
--model=$MODEL  \
--push-res=$PUSHRES \
--symmetry=$SYMMETRY \
--min-res=${HIGHRES_INCLUDE} \
${STRING_PARAMS}"
	echo "Merging with following command: ${MERGING_COMMAND}"
	eval "${MERGING_COMMAND}" 2>&1 | tee "${LOGS}/${OUTPUT}_partialator.log"

elif [[ "$MERGING" == "process_hkl" ]]; then
	MERGING_COMMAND="process_hkl \
-i $INPUT \
--push-res=$PUSHRES \
--symmetry=$SYMMETRY \
--min-res=${HIGHRES_INCLUDE} \
--min-cc=${MIN_CC} \
${STRING_PARAMS}"
	echo "Merging with following command: ${MERGING_COMMAND} -o ${LOGS}/${OUTPUT}.hkl"
	eval "${MERGING_COMMAND} -o ${LOGS}/${OUTPUT}.hkl"              2>&1 | tee "${LOGS}/${OUTPUT}_process_hkl.log"
	eval "${MERGING_COMMAND} -o ${LOGS}/${OUTPUT}.hkl1 --odd-only"  2>&1 | tee "${LOGS}/${OUTPUT}_process_hkl1.log"
	eval "${MERGING_COMMAND} -o ${LOGS}/${OUTPUT}.hkl2 --even-only" 2>&1 | tee "${LOGS}/${OUTPUT}_process_hkl2.log"
else
	:
fi	

# TODO: check whether data have been properly merged




# PART WHERE I ACCESS THE MERGED DATA QUALITY
#################
# RATE FUNCTION #
#################

# outputs to overall_stats.log statistics, obtained with check_hkl (SNR, multiplicity, N of refl, etc), and also Rsplit, CC and CC*.
# TODO: correct function rate in order to save logs & give results properly
# function rate() {
#     rm stats[0-9].dat &>/dev/null
#         compare_hkl tmp.hkl1 tmp.hkl2 -y "$symmetry" -p "$cell" --fom rsplit --nshells=10 --lowres "$lowres" --highres "$highres" &> compare_hkl.log ; cat shells.dat >  stats1.dat
#         compare_hkl tmp.hkl1 tmp.hkl2 -y "$symmetry" -p "$cell" --fom cc     --nshells=10 --lowres "$lowres" --highres "$highres" &> compare_hkl.log ; grep -a -v "shitcentre" shells.dat > stats2.dat
#         compare_hkl tmp.hkl1 tmp.hkl2 -y "$symmetry" -p "$cell" --fom ccstar --nshells=10 --lowres "$lowres" --highres "$highres" &> compare_hkl.log ; grep -a -v "shitcentre" shells.dat > stats3.dat
#         check_hkl tmp.hkl -y "$symmetry" -p "$cell"                                       --lowres="$lowres" --highres "$highres" &> compare_hkl.log ; cat shells.dat > stats4.dat
#
#         compare_hkl tmp.hkl1 tmp.hkl2 -y "$symmetry" -p "$cell" --fom rsplit --nshells=1 --lowres "$lowres" --highres "$highres" &> compare_hkl.log ; cat shells.dat >  stats5.dat
#         compare_hkl tmp.hkl1 tmp.hkl2 -y "$symmetry" -p "$cell" --fom cc     --nshells=1 --lowres "$lowres" --highres "$highres" &> compare_hkl.log ; grep -a -v "shitcentre" shells.dat > stats6.dat
#         compare_hkl tmp.hkl1 tmp.hkl2 -y "$symmetry" -p "$cell" --fom ccstar --nshells=1 --lowres "$lowres" --highres "$highres" &> compare_hkl.log ; grep -a -v "shitcentre" shells.dat >> stats7.dat
#         check_hkl tmp.hkl --nshells 1 -y "$symmetry" -p "$cell"                          --lowres "$lowres" --highres "$highres" &> compare_hkl.log ; cat shells.dat >> stats8.dat
#     paste stats4.dat <(awk '{print $3'} stats1.dat) <(awk '{print $3'} stats2.dat) <(awk '{print $3'} stats3.dat) | head -1        > overall_stats.csv
#     paste stats4.dat  <(awk '{print $2}' stats1.dat)  <(awk '{print $2}' stats2.dat)  <(awk '{print $2}' stats3.dat) | tail -n +2 >> overall_stats.csv
#
#     echo "   -------------------------------------------------------------------------------------------------------------------------------------------------------" >> overall_stats.csv
#     paste stats8.dat  <(awk '{print $2}' stats5.dat)  <(awk '{print $2}' stats6.dat)  <(awk '{print $2}' stats7.dat) | tail -n +2 >> overall_stats.csv
# }



###########
# CLEANUP #
###########
if [ "$CLEANUP" -eq 0 ]; then
	echo "......."
	echo "Warning: will not do cleanup"
else # no elif here -- validity check above guaranteers that else is enough
	echo "......."
	echo "Removing according to tmp.${OUTPUT} mask"
	rm "tmp.${OUTPUT}"* &> /dev/null
	if [[ -f tmp.stream ]]; then rm tmp.stream; fi
fi
