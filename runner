#!/bin/bash

HELP_STRING="\
Usage: runner input.yaml

See full documentation here: https://github.com/marinegor/still-utils
Or email marin@phystech.edu"

# reading input
if [ "$1" == "-h" ]; then
  echo "Usage: $(basename "$0") ${HELP_STRING}"
  exit 0
fi


# with courtesy to amazing @jasperes: https://github.com/jasperes/bash-yaml
#--------------------------------------------------------------------------
parse_yaml() {
    local yaml_file=$1
    local prefix=$2
    local s
    local w
    local fs

    s='[[:space:]]*'
    w='[a-zA-Z0-9_.-]*'
    fs="$(echo @|tr @ '\034')"

    (
        sed -e '/- [^\â€œ]'"[^\']"'.*: /s|\([ ]*\)- \([[:space:]]*\)|\1-\'$'\n''  \1\2|g' |

        sed -ne '/^--/s|--||g; s|\"|\\\"|g; s/[[:space:]]*$//g;' \
            -e "/#.*[\"\']/!s| #.*||g; /^#/s|#.*||g;" \
            -e "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
            -e "s|^\($s\)\($w\)${s}[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" |

        awk -F"$fs" '{
            indent = length($1)/2;
            if (length($2) == 0) { conj[indent]="+";} else {conj[indent]="";}
            vname[indent] = $2;
            for (i in vname) {if (i > indent) {delete vname[i]}}
                if (length($3) > 0) {
                    vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
                    printf("%s%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, conj[indent-1],$3);
                }
            }' |

        sed -e 's/_=/+=/g' |

        awk 'BEGIN {
                FS="=";
                OFS="="
            }
            /(-|\.).*=/ {
                gsub("-|\\.", "_", $1)
            }
            { print }'
    ) < "$yaml_file"
}

create_variables() {
    local yaml_file="$1"
    local prefix="$2"
    eval "$(parse_yaml "$yaml_file" "$prefix")"
}
#--------------------------------------------------------------------------


time=$(date "+%Y_%m_%d_%H_%M_%S")
if ! create_variables "$1"; then
	echo "Please provide input yaml file"; exit 1; fi

# check if path is absolute, if not -- make it
if ! [[ ${GEOM::1} == "/" ]]; then GEOM="${PWD}/${GEOM}"; fi
if ! [[ ${CELL::1} == "/" ]]; then CELL="${PWD}/${CELL}"; fi
if ! [[ ${LST::1} == "/" ]]; then LST="${PWD}/${LST}"; fi

# SLURM parameters
SLURM_HEADER_FILE="slurm.header"
SLURM_SETUP="module load apps/crystfel-0.8.0"


# Essential folders
LOGDIR="${PWD}/logs"; mkdir "${LOGDIR}" &> /dev/null
STREAMDIR="${PWD}/streams"; mkdir "${STREAMDIR}" &> /dev/null

CURRENT_LOGDIR="${LOGDIR}/${PROJECT_NAME}_${time}"
mkdir -p "${CURRENT_LOGDIR}/indexer-logs" 2>/dev/null || exit 1;


# Shuffling the stream
if [[ "$SHUFFLE" == '1' ]]; then
	shuf "$LST" > input.lst # your list must have events to enable this
	LST="input.lst";
fi


# Start building the indexamajig command
BASEEXECSTRING="indexamajig \
-g ${GEOM} \
-p ${CELL} \
--min-snr=${SNR} \
--threshold=${THRESHOLD} \
--highres=${HIGHRES} \
--temp-dir=${CURRENT_LOGDIR}/indexer-logs \
--min-peaks=${MINPEAKS} \
${OTHERPARAMS}"


if [[ "${SLURM}" == "1" ]]; then
	# Divide initial list into separate lists for each job
	NLINES_INPUT="$(wc -l ${LST})"
	if [[ "${NLINES_INPUT}" < "${SLURMLINES}" ]]; then
		split --numeric-suffixes=1 \
			--additional-suffix=".lst" \
			--suffix-length=4 \
			--number=l/${SLURMJOBS} \
			"${LST}" "${CURRENT_LOGDIR}/list_"
	else
		split --numeric-suffixes=1 \
			--additional-suffix=".lst" \
			--suffix-length=4 \
			--lines=${SLURMLINES} \
			"${LST}" "${CURRENT_LOGDIR}/list_"
	fi

	for current_lst in "${CURRENT_LOGDIR}/list_"*; do
		dummy="$(basename "${current_lst}" .lst)"
		current_idx=${dummy: -4}  # 4 is hardcoded in suffix-length in split above
		current_stream=${CURRENT_LOGDIR}/stream_${current_idx}.stream
		current_worker=${CURRENT_LOGDIR}/worker_${current_idx}.sh
		cat ${SLURM_HEADER_FILE} >> "${current_worker}"

		echo "#SBATCH --chdir ${CURRENT_LOGDIR}" >> "${current_worker}" >> ${current_worker}
		echo "#SBATCH --job-name ${PROJECT_NAME}-${current_idx}" >> ${current_worker}
		echo "#SBATCH --output ${CURRENT_LOGDIR}/stdout_${current_idx}.log" >> ${current_worker}
		echo "#SBATCH --error ${CURRENT_LOGDIR}/stderr_${current_idx}.log" >> ${current_worker}
		echo >> "${current_worker}"

		echo "${SLURM_SETUP}" >> "${current_worker}"

		# now writing the execution string itself

		EXECSTRING="${BASEEXECSTRING} -o ${current_stream} -i ${current_lst}"
		EXECSTRING="${EXECSTRING} --peaks=${PEAKS} --indexing=${INDEXING}"
		EXECSTRING="${EXECSTRING} -j \`nproc\`"  # this will use the `nproc` value on host machine
		echo "$EXECSTRING" >> "${current_worker}"

		echo "cat ${current_stream} | pylock ${STREAMDIR}/${PROJECT_NAME}_${time}.stream" >> "${current_worker}"
		echo "tar xzvf ${current_stream}.tar.gz ${current_stream}" >> "${current_worker}"

		sbatch "${current_worker}"
	done

else
	# linking the laststream
	ln -sf "streams/${PROJECT_NAME}_${time}.stream" laststream
	EXECSTRING="${BASEEXECSTRING} -o ${STREAMDIR}/${PROJECT_NAME}_${time}.stream -i ${LST}"
	EXECSTRING="${EXECSTRING} --peaks=${PEAKS} --indexing=${INDEXING}"
	EXECSTRING="${EXECSTRING} -j ${NPROC}"
	echo "$EXECSTRING"  
	eval "${EXECSTRING}" |& tee "${LOGDIR}/log.indexamajig_${time}"
fi
